//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""MovementInput"",
            ""id"": ""d749ac3c-0b6f-4e55-9a4c-796189ab167a"",
            ""actions"": [
                {
                    ""name"": ""KeyboardMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""eead5e0a-0c1c-42e9-93c3-a88523497f98"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""777ab618-e756-4b0d-8b54-951c7356ce0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""mouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8816bbb8-31c5-403b-959b-0037017208bc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""185f7200-c9ed-4987-b4bf-63958ca39345"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""921b0bc8-417f-49ca-939b-81e1465b2b2a"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""d1b24ada-da0f-4295-adf3-57a667406cca"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""7f305627-29a2-48d0-8af6-caaa990c3090"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""359af8f4-7398-4d71-b57c-3bae3197a7c7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""eee8bcd5-81b4-42dc-b023-3b0b6f950d13"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0af766f4-9248-401d-8ac7-3a13cf3c0040"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ControllerInput"",
            ""id"": ""c2db2aa9-7b02-4207-a2dc-1fc64c08f94f"",
            ""actions"": [
                {
                    ""name"": ""ContollerMovement"",
                    ""type"": ""Value"",
                    ""id"": ""8da777c3-8c80-4d4c-b9e3-ee36a15770ed"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Test"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cd176b3b-f808-4b40-95e3-63f971447c2b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1248e83c-1ffd-474e-a8c4-fc90887b2ac6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseLeftArm"",
                    ""type"": ""Button"",
                    ""id"": ""547ea63b-89a6-4dd9-9c95-87dfa8fc9553"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseRightArm"",
                    ""type"": ""Button"",
                    ""id"": ""31d5190c-da23-4478-9609-22265dad0a7b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""66b58a61-e577-44c1-9dd1-c1c94ddccaa1"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ContollerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b3eba37-d5f4-4d77-8563-2f53ad81ce53"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81690e1e-1c30-48ee-ba9c-dc43f4ba1d5f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15a424dc-939e-4550-aa0a-860736aa9c24"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseLeftArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ddd3be8-1ab8-4dc1-9b1c-c67c139ed762"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseRightArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XboxInput"",
            ""id"": ""cb42d182-a5a9-4035-9b2b-9605d504aecf"",
            ""actions"": [
                {
                    ""name"": ""ContollerMovement"",
                    ""type"": ""Value"",
                    ""id"": ""c1437dfb-591b-403e-afa6-6a819124f066"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Test"",
                    ""type"": ""PassThrough"",
                    ""id"": ""38759fc1-ed4e-485a-b218-1efb0d4bba70"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""3ea1b7b1-b7fd-4569-89c1-555b6e65a420"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseLeftArm"",
                    ""type"": ""Button"",
                    ""id"": ""8a1f8274-04e1-4f11-81a2-398a0f3aaef7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseRightArm"",
                    ""type"": ""Button"",
                    ""id"": ""61acc4f8-e310-4d3c-86de-905ac9b1c74e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1387de2b-d3d0-458a-a372-40442fc0d842"",
                    ""path"": ""<XInputController>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ContollerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74991e13-afc6-4cc8-ba76-9deadffa5d6d"",
                    ""path"": ""<XInputController>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e009ee8f-421b-4dbf-b975-b0240caa26c7"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8de752d-8129-4afb-aef8-9d526c9e04d8"",
                    ""path"": ""<XInputController>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseLeftArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7affc0ab-def9-4db6-8c00-9bce8015cdba"",
                    ""path"": ""<XInputController>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseRightArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlaystationInput"",
            ""id"": ""7a57bea2-b6dd-4150-91f8-8926630cdbf0"",
            ""actions"": [
                {
                    ""name"": ""ContollerMovement"",
                    ""type"": ""Value"",
                    ""id"": ""d785c553-3776-4fd9-9ae8-09feaa5f5061"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Test"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ab825564-9551-44d8-b8c2-d63a036b2fff"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""dac3c489-ef8e-4437-bce1-7cac60dc775d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseLeftArm"",
                    ""type"": ""Button"",
                    ""id"": ""bb589e46-cdc3-4df9-85df-64797d08a94c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseRightArm"",
                    ""type"": ""Button"",
                    ""id"": ""ab96827a-4bb7-469d-9025-5c288118b691"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e39144fb-8ccb-463f-9b40-ab4de67ae4d1"",
                    ""path"": ""<DualShockGamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ContollerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f97c8e8f-10d1-4db6-ac8b-362f6cd91927"",
                    ""path"": ""<DualShockGamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba3c8b4c-73c8-4e84-a054-075cfdcb2846"",
                    ""path"": ""<DualShockGamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""133d4f6d-db73-4df7-8240-f89cb78977e1"",
                    ""path"": ""<DualShockGamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseLeftArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a886d289-d985-4ec3-8ef1-66f588997ffb"",
                    ""path"": ""<DualShockGamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseRightArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovementInput
        m_MovementInput = asset.FindActionMap("MovementInput", throwIfNotFound: true);
        m_MovementInput_KeyboardMovement = m_MovementInput.FindAction("KeyboardMovement", throwIfNotFound: true);
        m_MovementInput_Jump = m_MovementInput.FindAction("Jump", throwIfNotFound: true);
        m_MovementInput_mouse = m_MovementInput.FindAction("mouse", throwIfNotFound: true);
        // ControllerInput
        m_ControllerInput = asset.FindActionMap("ControllerInput", throwIfNotFound: true);
        m_ControllerInput_ContollerMovement = m_ControllerInput.FindAction("ContollerMovement", throwIfNotFound: true);
        m_ControllerInput_Test = m_ControllerInput.FindAction("Test", throwIfNotFound: true);
        m_ControllerInput_Jump = m_ControllerInput.FindAction("Jump", throwIfNotFound: true);
        m_ControllerInput_UseLeftArm = m_ControllerInput.FindAction("UseLeftArm", throwIfNotFound: true);
        m_ControllerInput_UseRightArm = m_ControllerInput.FindAction("UseRightArm", throwIfNotFound: true);
        // XboxInput
        m_XboxInput = asset.FindActionMap("XboxInput", throwIfNotFound: true);
        m_XboxInput_ContollerMovement = m_XboxInput.FindAction("ContollerMovement", throwIfNotFound: true);
        m_XboxInput_Test = m_XboxInput.FindAction("Test", throwIfNotFound: true);
        m_XboxInput_Jump = m_XboxInput.FindAction("Jump", throwIfNotFound: true);
        m_XboxInput_UseLeftArm = m_XboxInput.FindAction("UseLeftArm", throwIfNotFound: true);
        m_XboxInput_UseRightArm = m_XboxInput.FindAction("UseRightArm", throwIfNotFound: true);
        // PlaystationInput
        m_PlaystationInput = asset.FindActionMap("PlaystationInput", throwIfNotFound: true);
        m_PlaystationInput_ContollerMovement = m_PlaystationInput.FindAction("ContollerMovement", throwIfNotFound: true);
        m_PlaystationInput_Test = m_PlaystationInput.FindAction("Test", throwIfNotFound: true);
        m_PlaystationInput_Jump = m_PlaystationInput.FindAction("Jump", throwIfNotFound: true);
        m_PlaystationInput_UseLeftArm = m_PlaystationInput.FindAction("UseLeftArm", throwIfNotFound: true);
        m_PlaystationInput_UseRightArm = m_PlaystationInput.FindAction("UseRightArm", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementInput
    private readonly InputActionMap m_MovementInput;
    private List<IMovementInputActions> m_MovementInputActionsCallbackInterfaces = new List<IMovementInputActions>();
    private readonly InputAction m_MovementInput_KeyboardMovement;
    private readonly InputAction m_MovementInput_Jump;
    private readonly InputAction m_MovementInput_mouse;
    public struct MovementInputActions
    {
        private @PlayerInput m_Wrapper;
        public MovementInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @KeyboardMovement => m_Wrapper.m_MovementInput_KeyboardMovement;
        public InputAction @Jump => m_Wrapper.m_MovementInput_Jump;
        public InputAction @mouse => m_Wrapper.m_MovementInput_mouse;
        public InputActionMap Get() { return m_Wrapper.m_MovementInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementInputActions set) { return set.Get(); }
        public void AddCallbacks(IMovementInputActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementInputActionsCallbackInterfaces.Add(instance);
            @KeyboardMovement.started += instance.OnKeyboardMovement;
            @KeyboardMovement.performed += instance.OnKeyboardMovement;
            @KeyboardMovement.canceled += instance.OnKeyboardMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @mouse.started += instance.OnMouse;
            @mouse.performed += instance.OnMouse;
            @mouse.canceled += instance.OnMouse;
        }

        private void UnregisterCallbacks(IMovementInputActions instance)
        {
            @KeyboardMovement.started -= instance.OnKeyboardMovement;
            @KeyboardMovement.performed -= instance.OnKeyboardMovement;
            @KeyboardMovement.canceled -= instance.OnKeyboardMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @mouse.started -= instance.OnMouse;
            @mouse.performed -= instance.OnMouse;
            @mouse.canceled -= instance.OnMouse;
        }

        public void RemoveCallbacks(IMovementInputActions instance)
        {
            if (m_Wrapper.m_MovementInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementInputActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementInputActions @MovementInput => new MovementInputActions(this);

    // ControllerInput
    private readonly InputActionMap m_ControllerInput;
    private List<IControllerInputActions> m_ControllerInputActionsCallbackInterfaces = new List<IControllerInputActions>();
    private readonly InputAction m_ControllerInput_ContollerMovement;
    private readonly InputAction m_ControllerInput_Test;
    private readonly InputAction m_ControllerInput_Jump;
    private readonly InputAction m_ControllerInput_UseLeftArm;
    private readonly InputAction m_ControllerInput_UseRightArm;
    public struct ControllerInputActions
    {
        private @PlayerInput m_Wrapper;
        public ControllerInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ContollerMovement => m_Wrapper.m_ControllerInput_ContollerMovement;
        public InputAction @Test => m_Wrapper.m_ControllerInput_Test;
        public InputAction @Jump => m_Wrapper.m_ControllerInput_Jump;
        public InputAction @UseLeftArm => m_Wrapper.m_ControllerInput_UseLeftArm;
        public InputAction @UseRightArm => m_Wrapper.m_ControllerInput_UseRightArm;
        public InputActionMap Get() { return m_Wrapper.m_ControllerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerInputActions set) { return set.Get(); }
        public void AddCallbacks(IControllerInputActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllerInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllerInputActionsCallbackInterfaces.Add(instance);
            @ContollerMovement.started += instance.OnContollerMovement;
            @ContollerMovement.performed += instance.OnContollerMovement;
            @ContollerMovement.canceled += instance.OnContollerMovement;
            @Test.started += instance.OnTest;
            @Test.performed += instance.OnTest;
            @Test.canceled += instance.OnTest;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @UseLeftArm.started += instance.OnUseLeftArm;
            @UseLeftArm.performed += instance.OnUseLeftArm;
            @UseLeftArm.canceled += instance.OnUseLeftArm;
            @UseRightArm.started += instance.OnUseRightArm;
            @UseRightArm.performed += instance.OnUseRightArm;
            @UseRightArm.canceled += instance.OnUseRightArm;
        }

        private void UnregisterCallbacks(IControllerInputActions instance)
        {
            @ContollerMovement.started -= instance.OnContollerMovement;
            @ContollerMovement.performed -= instance.OnContollerMovement;
            @ContollerMovement.canceled -= instance.OnContollerMovement;
            @Test.started -= instance.OnTest;
            @Test.performed -= instance.OnTest;
            @Test.canceled -= instance.OnTest;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @UseLeftArm.started -= instance.OnUseLeftArm;
            @UseLeftArm.performed -= instance.OnUseLeftArm;
            @UseLeftArm.canceled -= instance.OnUseLeftArm;
            @UseRightArm.started -= instance.OnUseRightArm;
            @UseRightArm.performed -= instance.OnUseRightArm;
            @UseRightArm.canceled -= instance.OnUseRightArm;
        }

        public void RemoveCallbacks(IControllerInputActions instance)
        {
            if (m_Wrapper.m_ControllerInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllerInputActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllerInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllerInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllerInputActions @ControllerInput => new ControllerInputActions(this);

    // XboxInput
    private readonly InputActionMap m_XboxInput;
    private List<IXboxInputActions> m_XboxInputActionsCallbackInterfaces = new List<IXboxInputActions>();
    private readonly InputAction m_XboxInput_ContollerMovement;
    private readonly InputAction m_XboxInput_Test;
    private readonly InputAction m_XboxInput_Jump;
    private readonly InputAction m_XboxInput_UseLeftArm;
    private readonly InputAction m_XboxInput_UseRightArm;
    public struct XboxInputActions
    {
        private @PlayerInput m_Wrapper;
        public XboxInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ContollerMovement => m_Wrapper.m_XboxInput_ContollerMovement;
        public InputAction @Test => m_Wrapper.m_XboxInput_Test;
        public InputAction @Jump => m_Wrapper.m_XboxInput_Jump;
        public InputAction @UseLeftArm => m_Wrapper.m_XboxInput_UseLeftArm;
        public InputAction @UseRightArm => m_Wrapper.m_XboxInput_UseRightArm;
        public InputActionMap Get() { return m_Wrapper.m_XboxInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XboxInputActions set) { return set.Get(); }
        public void AddCallbacks(IXboxInputActions instance)
        {
            if (instance == null || m_Wrapper.m_XboxInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XboxInputActionsCallbackInterfaces.Add(instance);
            @ContollerMovement.started += instance.OnContollerMovement;
            @ContollerMovement.performed += instance.OnContollerMovement;
            @ContollerMovement.canceled += instance.OnContollerMovement;
            @Test.started += instance.OnTest;
            @Test.performed += instance.OnTest;
            @Test.canceled += instance.OnTest;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @UseLeftArm.started += instance.OnUseLeftArm;
            @UseLeftArm.performed += instance.OnUseLeftArm;
            @UseLeftArm.canceled += instance.OnUseLeftArm;
            @UseRightArm.started += instance.OnUseRightArm;
            @UseRightArm.performed += instance.OnUseRightArm;
            @UseRightArm.canceled += instance.OnUseRightArm;
        }

        private void UnregisterCallbacks(IXboxInputActions instance)
        {
            @ContollerMovement.started -= instance.OnContollerMovement;
            @ContollerMovement.performed -= instance.OnContollerMovement;
            @ContollerMovement.canceled -= instance.OnContollerMovement;
            @Test.started -= instance.OnTest;
            @Test.performed -= instance.OnTest;
            @Test.canceled -= instance.OnTest;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @UseLeftArm.started -= instance.OnUseLeftArm;
            @UseLeftArm.performed -= instance.OnUseLeftArm;
            @UseLeftArm.canceled -= instance.OnUseLeftArm;
            @UseRightArm.started -= instance.OnUseRightArm;
            @UseRightArm.performed -= instance.OnUseRightArm;
            @UseRightArm.canceled -= instance.OnUseRightArm;
        }

        public void RemoveCallbacks(IXboxInputActions instance)
        {
            if (m_Wrapper.m_XboxInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXboxInputActions instance)
        {
            foreach (var item in m_Wrapper.m_XboxInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XboxInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XboxInputActions @XboxInput => new XboxInputActions(this);

    // PlaystationInput
    private readonly InputActionMap m_PlaystationInput;
    private List<IPlaystationInputActions> m_PlaystationInputActionsCallbackInterfaces = new List<IPlaystationInputActions>();
    private readonly InputAction m_PlaystationInput_ContollerMovement;
    private readonly InputAction m_PlaystationInput_Test;
    private readonly InputAction m_PlaystationInput_Jump;
    private readonly InputAction m_PlaystationInput_UseLeftArm;
    private readonly InputAction m_PlaystationInput_UseRightArm;
    public struct PlaystationInputActions
    {
        private @PlayerInput m_Wrapper;
        public PlaystationInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ContollerMovement => m_Wrapper.m_PlaystationInput_ContollerMovement;
        public InputAction @Test => m_Wrapper.m_PlaystationInput_Test;
        public InputAction @Jump => m_Wrapper.m_PlaystationInput_Jump;
        public InputAction @UseLeftArm => m_Wrapper.m_PlaystationInput_UseLeftArm;
        public InputAction @UseRightArm => m_Wrapper.m_PlaystationInput_UseRightArm;
        public InputActionMap Get() { return m_Wrapper.m_PlaystationInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlaystationInputActions set) { return set.Get(); }
        public void AddCallbacks(IPlaystationInputActions instance)
        {
            if (instance == null || m_Wrapper.m_PlaystationInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlaystationInputActionsCallbackInterfaces.Add(instance);
            @ContollerMovement.started += instance.OnContollerMovement;
            @ContollerMovement.performed += instance.OnContollerMovement;
            @ContollerMovement.canceled += instance.OnContollerMovement;
            @Test.started += instance.OnTest;
            @Test.performed += instance.OnTest;
            @Test.canceled += instance.OnTest;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @UseLeftArm.started += instance.OnUseLeftArm;
            @UseLeftArm.performed += instance.OnUseLeftArm;
            @UseLeftArm.canceled += instance.OnUseLeftArm;
            @UseRightArm.started += instance.OnUseRightArm;
            @UseRightArm.performed += instance.OnUseRightArm;
            @UseRightArm.canceled += instance.OnUseRightArm;
        }

        private void UnregisterCallbacks(IPlaystationInputActions instance)
        {
            @ContollerMovement.started -= instance.OnContollerMovement;
            @ContollerMovement.performed -= instance.OnContollerMovement;
            @ContollerMovement.canceled -= instance.OnContollerMovement;
            @Test.started -= instance.OnTest;
            @Test.performed -= instance.OnTest;
            @Test.canceled -= instance.OnTest;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @UseLeftArm.started -= instance.OnUseLeftArm;
            @UseLeftArm.performed -= instance.OnUseLeftArm;
            @UseLeftArm.canceled -= instance.OnUseLeftArm;
            @UseRightArm.started -= instance.OnUseRightArm;
            @UseRightArm.performed -= instance.OnUseRightArm;
            @UseRightArm.canceled -= instance.OnUseRightArm;
        }

        public void RemoveCallbacks(IPlaystationInputActions instance)
        {
            if (m_Wrapper.m_PlaystationInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlaystationInputActions instance)
        {
            foreach (var item in m_Wrapper.m_PlaystationInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlaystationInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlaystationInputActions @PlaystationInput => new PlaystationInputActions(this);
    public interface IMovementInputActions
    {
        void OnKeyboardMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
    }
    public interface IControllerInputActions
    {
        void OnContollerMovement(InputAction.CallbackContext context);
        void OnTest(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnUseLeftArm(InputAction.CallbackContext context);
        void OnUseRightArm(InputAction.CallbackContext context);
    }
    public interface IXboxInputActions
    {
        void OnContollerMovement(InputAction.CallbackContext context);
        void OnTest(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnUseLeftArm(InputAction.CallbackContext context);
        void OnUseRightArm(InputAction.CallbackContext context);
    }
    public interface IPlaystationInputActions
    {
        void OnContollerMovement(InputAction.CallbackContext context);
        void OnTest(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnUseLeftArm(InputAction.CallbackContext context);
        void OnUseRightArm(InputAction.CallbackContext context);
    }
}
