//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""MovementInput"",
            ""id"": ""d749ac3c-0b6f-4e55-9a4c-796189ab167a"",
            ""actions"": [
                {
                    ""name"": ""KeyboardMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""eead5e0a-0c1c-42e9-93c3-a88523497f98"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""777ab618-e756-4b0d-8b54-951c7356ce0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""mouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8816bbb8-31c5-403b-959b-0037017208bc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""185f7200-c9ed-4987-b4bf-63958ca39345"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""921b0bc8-417f-49ca-939b-81e1465b2b2a"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""d1b24ada-da0f-4295-adf3-57a667406cca"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""7f305627-29a2-48d0-8af6-caaa990c3090"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""359af8f4-7398-4d71-b57c-3bae3197a7c7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""eee8bcd5-81b4-42dc-b023-3b0b6f950d13"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0af766f4-9248-401d-8ac7-3a13cf3c0040"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ControllerMovementInput"",
            ""id"": ""cb42d182-a5a9-4035-9b2b-9605d504aecf"",
            ""actions"": [
                {
                    ""name"": ""ContollerMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c1437dfb-591b-403e-afa6-6a819124f066"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test"",
                    ""type"": ""PassThrough"",
                    ""id"": ""38759fc1-ed4e-485a-b218-1efb0d4bba70"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""3ea1b7b1-b7fd-4569-89c1-555b6e65a420"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseLeftArm"",
                    ""type"": ""Button"",
                    ""id"": ""8a1f8274-04e1-4f11-81a2-398a0f3aaef7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseRightArm"",
                    ""type"": ""Button"",
                    ""id"": ""61acc4f8-e310-4d3c-86de-905ac9b1c74e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1387de2b-d3d0-458a-a372-40442fc0d842"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ContollerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74991e13-afc6-4cc8-ba76-9deadffa5d6d"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e009ee8f-421b-4dbf-b975-b0240caa26c7"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8de752d-8129-4afb-aef8-9d526c9e04d8"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseLeftArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7affc0ab-def9-4db6-8c00-9bce8015cdba"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseRightArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovementInput
        m_MovementInput = asset.FindActionMap("MovementInput", throwIfNotFound: true);
        m_MovementInput_KeyboardMovement = m_MovementInput.FindAction("KeyboardMovement", throwIfNotFound: true);
        m_MovementInput_Jump = m_MovementInput.FindAction("Jump", throwIfNotFound: true);
        m_MovementInput_mouse = m_MovementInput.FindAction("mouse", throwIfNotFound: true);
        // ControllerMovementInput
        m_ControllerMovementInput = asset.FindActionMap("ControllerMovementInput", throwIfNotFound: true);
        m_ControllerMovementInput_ContollerMovement = m_ControllerMovementInput.FindAction("ContollerMovement", throwIfNotFound: true);
        m_ControllerMovementInput_Test = m_ControllerMovementInput.FindAction("Test", throwIfNotFound: true);
        m_ControllerMovementInput_Jump = m_ControllerMovementInput.FindAction("Jump", throwIfNotFound: true);
        m_ControllerMovementInput_UseLeftArm = m_ControllerMovementInput.FindAction("UseLeftArm", throwIfNotFound: true);
        m_ControllerMovementInput_UseRightArm = m_ControllerMovementInput.FindAction("UseRightArm", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementInput
    private readonly InputActionMap m_MovementInput;
    private List<IMovementInputActions> m_MovementInputActionsCallbackInterfaces = new List<IMovementInputActions>();
    private readonly InputAction m_MovementInput_KeyboardMovement;
    private readonly InputAction m_MovementInput_Jump;
    private readonly InputAction m_MovementInput_mouse;
    public struct MovementInputActions
    {
        private @PlayerInput m_Wrapper;
        public MovementInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @KeyboardMovement => m_Wrapper.m_MovementInput_KeyboardMovement;
        public InputAction @Jump => m_Wrapper.m_MovementInput_Jump;
        public InputAction @mouse => m_Wrapper.m_MovementInput_mouse;
        public InputActionMap Get() { return m_Wrapper.m_MovementInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementInputActions set) { return set.Get(); }
        public void AddCallbacks(IMovementInputActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementInputActionsCallbackInterfaces.Add(instance);
            @KeyboardMovement.started += instance.OnKeyboardMovement;
            @KeyboardMovement.performed += instance.OnKeyboardMovement;
            @KeyboardMovement.canceled += instance.OnKeyboardMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @mouse.started += instance.OnMouse;
            @mouse.performed += instance.OnMouse;
            @mouse.canceled += instance.OnMouse;
        }

        private void UnregisterCallbacks(IMovementInputActions instance)
        {
            @KeyboardMovement.started -= instance.OnKeyboardMovement;
            @KeyboardMovement.performed -= instance.OnKeyboardMovement;
            @KeyboardMovement.canceled -= instance.OnKeyboardMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @mouse.started -= instance.OnMouse;
            @mouse.performed -= instance.OnMouse;
            @mouse.canceled -= instance.OnMouse;
        }

        public void RemoveCallbacks(IMovementInputActions instance)
        {
            if (m_Wrapper.m_MovementInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementInputActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementInputActions @MovementInput => new MovementInputActions(this);

    // ControllerMovementInput
    private readonly InputActionMap m_ControllerMovementInput;
    private List<IControllerMovementInputActions> m_ControllerMovementInputActionsCallbackInterfaces = new List<IControllerMovementInputActions>();
    private readonly InputAction m_ControllerMovementInput_ContollerMovement;
    private readonly InputAction m_ControllerMovementInput_Test;
    private readonly InputAction m_ControllerMovementInput_Jump;
    private readonly InputAction m_ControllerMovementInput_UseLeftArm;
    private readonly InputAction m_ControllerMovementInput_UseRightArm;
    public struct ControllerMovementInputActions
    {
        private @PlayerInput m_Wrapper;
        public ControllerMovementInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ContollerMovement => m_Wrapper.m_ControllerMovementInput_ContollerMovement;
        public InputAction @Test => m_Wrapper.m_ControllerMovementInput_Test;
        public InputAction @Jump => m_Wrapper.m_ControllerMovementInput_Jump;
        public InputAction @UseLeftArm => m_Wrapper.m_ControllerMovementInput_UseLeftArm;
        public InputAction @UseRightArm => m_Wrapper.m_ControllerMovementInput_UseRightArm;
        public InputActionMap Get() { return m_Wrapper.m_ControllerMovementInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerMovementInputActions set) { return set.Get(); }
        public void AddCallbacks(IControllerMovementInputActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllerMovementInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllerMovementInputActionsCallbackInterfaces.Add(instance);
            @ContollerMovement.started += instance.OnContollerMovement;
            @ContollerMovement.performed += instance.OnContollerMovement;
            @ContollerMovement.canceled += instance.OnContollerMovement;
            @Test.started += instance.OnTest;
            @Test.performed += instance.OnTest;
            @Test.canceled += instance.OnTest;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @UseLeftArm.started += instance.OnUseLeftArm;
            @UseLeftArm.performed += instance.OnUseLeftArm;
            @UseLeftArm.canceled += instance.OnUseLeftArm;
            @UseRightArm.started += instance.OnUseRightArm;
            @UseRightArm.performed += instance.OnUseRightArm;
            @UseRightArm.canceled += instance.OnUseRightArm;
        }

        private void UnregisterCallbacks(IControllerMovementInputActions instance)
        {
            @ContollerMovement.started -= instance.OnContollerMovement;
            @ContollerMovement.performed -= instance.OnContollerMovement;
            @ContollerMovement.canceled -= instance.OnContollerMovement;
            @Test.started -= instance.OnTest;
            @Test.performed -= instance.OnTest;
            @Test.canceled -= instance.OnTest;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @UseLeftArm.started -= instance.OnUseLeftArm;
            @UseLeftArm.performed -= instance.OnUseLeftArm;
            @UseLeftArm.canceled -= instance.OnUseLeftArm;
            @UseRightArm.started -= instance.OnUseRightArm;
            @UseRightArm.performed -= instance.OnUseRightArm;
            @UseRightArm.canceled -= instance.OnUseRightArm;
        }

        public void RemoveCallbacks(IControllerMovementInputActions instance)
        {
            if (m_Wrapper.m_ControllerMovementInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllerMovementInputActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllerMovementInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllerMovementInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllerMovementInputActions @ControllerMovementInput => new ControllerMovementInputActions(this);
    public interface IMovementInputActions
    {
        void OnKeyboardMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
    }
    public interface IControllerMovementInputActions
    {
        void OnContollerMovement(InputAction.CallbackContext context);
        void OnTest(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnUseLeftArm(InputAction.CallbackContext context);
        void OnUseRightArm(InputAction.CallbackContext context);
    }
}
